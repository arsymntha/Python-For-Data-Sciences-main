# -*- coding: utf-8 -*-
"""online-food-order-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WMx63e6X4qeRBlAsDvAupjUphFdjqvdZ
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns

# Import Dataset from Kaggle with API

# Install Kaggle library
!pip -q install kaggle

# Upload the Kaggle API JSON file
from google.colab import files
files.upload()

# Move the uploaded JSON file to the required directory and set permissions
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download the dataset from Kaggle
!kaggle datasets download -d sudarshan24byte/online-food-dataset

# Unzip the downloaded dataset
!unzip -q 'online-food-dataset.zip'

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/onlinefoods.csv')
df.head()

df.info()

"""# EDA"""

df.shape

plt.figure(figsize=(15, 10))
plt.title("Online Food Order Decisions Based on the Age of the Customer")
sns.histplot(x="Age", hue="Output", data=df)
plt.show()

plt.figure(figsize=(15, 10))
plt.title("Online Food Order Decisions Based on the Size of the Family")
sns.histplot(x="Family size", hue="Output", data=df)
plt.show()

buying_food_again = df.query("Output == 'Yes'")
buying_food_again.head()

gender_counts = buying_food_again["Gender"].value_counts().reset_index()
gender_counts.columns = ['Gender', 'Count']

fig = px.pie(gender_counts, values='Count', names='Gender', title='Who orders food more: Male or Female')

fig.show()

martial_status_counts = buying_food_again["Marital Status"].value_counts().reset_index()
martial_status_counts.columns = ['Marital Status', 'Count']

fig = px.pie(martial_status_counts, values='Count', names='Marital Status', title='Who orders food more: Married or Singles')

fig.show()

monthly_income_counts = buying_food_again["Monthly Income"].value_counts().reset_index()
monthly_income_counts.columns = ['Monthly Income', 'Count']

fig = px.pie(monthly_income_counts, values='Count', names='Monthly Income', title='Analyzing Food Ordering Behavior Across Income Levels')

fig.show()

family_size_counts = buying_food_again["Family size"].value_counts().reset_index()
family_size_counts.columns = ['Family size', 'Count']

fig = px.pie(family_size_counts, values='Count', names='Family size', title='Food Ordering Patterns Based on Family Size')

fig.show()

qualification_counts = buying_food_again["Educational Qualifications"].value_counts().reset_index()
qualification_counts.columns = ['Educational Qualifications', 'Count']

fig = px.bar(qualification_counts, x='Educational Qualifications', y='Count', title='Food ordering pattern based on the customers quailification', color='Educational Qualifications')

fig.show()

feedback_counts = df["Feedback"].value_counts().reset_index()
feedback_counts.columns = ['Feedback', 'Count']

feedback_counts_again = buying_food_again["Feedback"].value_counts().reset_index()
feedback_counts_again.columns = ['Feedback', 'Count']


fig = px.bar(feedback_counts, x='Feedback', y='Count', title='Positive vs Negative Feedback', color='Feedback')
fig_ = px.bar(feedback_counts_again, x='Feedback', y='Count', title='Positive vs Negative Feedback based on the repeat food purchase', color='Feedback')

fig.show()
fig_.show()

"""# Converting all categorical to numerical values"""

df.dtypes

print('Gender Counts: ', df['Gender'].value_counts())
print('-----------')
print('Marital Status Counts: ', df['Marital Status'].value_counts())
print('-----------')
print('Occupation counts: ', df['Occupation'].value_counts())
print('-----------')
print('Monthly Income counts: ', df['Monthly Income'].value_counts())
print('-----------')
print('Educational Qualifications counts: ', df['Educational Qualifications'].value_counts())
print('-----------')
print('Feedback counts: ', df['Feedback'].value_counts())

df = df.drop(['Unnamed: 12'], axis=1)
df['Gender'] = df["Gender"].map({"Male": 1, "Female": 0})
df['Marital Status'] = df['Marital Status'].map({'Prefer not to say': 0, 'Single': 1, 'Married': 2})
df['Occupation'] = df['Occupation'].map({"Student": 1, "Employee": 2, "Self Employeed": 3, "House wife": 4})
df["Educational Qualifications"] = df["Educational Qualifications"].map({"Graduate": 1, "Post Graduate": 2, "Ph.D": 3, "School": 4, "Uneducated": 5})
df["Monthly Income"] = df["Monthly Income"].map({"No Income": 0, "25001 to 50000": 50000, "More than 50000": 70000, "10001 to 25000": 25000, "Below Rs.10000": 10000})
df["Feedback"] = df["Feedback"].map({"Positive": 1, "Negative ": 0})

df.head()

"""# Preparing The Model"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

X = df.drop(['Output', 'latitude', 'longitude', 'Pin code'], axis=1)
y = df['Output']

xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.1, random_state=42)

model = RandomForestClassifier()
model.fit(xtrain, ytrain)
model.score(xtest, ytest)

"""# Let's Test The Model

* Age -> 21
* Gender -> Male [1]
* Marital Status -> Single [1]
* Occupation -> Student [1]
* Monthly Income -> No Income [0]
* Educational Qualification -> Graduate [1]
* Family Size -> 3
* Feedback -> Yes [1]
"""

model.predict([[21, 1, 1, 1, 0, 1, 3, 1]])

"""* Age -> 21
* Gender -> Male [1]
* Marital Status -> Single [1]
* Occupation -> Student [1]
* Monthly Income -> No Income [0]
* Educational Qualification -> Graduate [1]
* Family Size -> 1
* Feedback -> No [0]
"""

model.predict([[21, 1, 1, 1, 0, 1, 1, 0]])

"""Source :

https://www.kaggle.com/code/sudarshan24byte/online-food-order-prediction#Converting-all-categorical-to-numerical-values
"""